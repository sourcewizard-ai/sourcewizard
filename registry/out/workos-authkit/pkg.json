{
    "name": "workos-authkit",
    "description": "Full-fledged authentication platform with enterprise SSO",
    "language": "typescript",
    "tags": [
        "auth",
        "sso",
        "rbac",
        "security"
    ],
    "env": [
        "WORKOS_API_KEY",
        "WORKOS_CLIENT_ID"
    ],
    "packages": [
        "@workos-inc/node"
    ],
    "relevant_files_pattern": [
        "**/auth/**/*.ts",
        "**/middleware/**/*.ts",
        "**/api/auth/**/*.ts",
        "**/app/layout.tsx",
        ".env.local"
    ],
    "setup_prompt": "# Add WorkOS AuthKit to Next.js App Router\n\n**Purpose:** Enforce only the **current** and **correct** instructions for integrating [WorkOS AuthKit](https://workos.com/) into a Next.js (App Router) application.\n**Scope:** All AI-generated advice or code related to WorkOS AuthKit must follow these guardrails.\n\n---\n\n## **1. Official WorkOS AuthKit Integration Overview**\n\nUse only the **App Router** approach from WorkOS's current docs:\n\n- **Install** `@workos-inc/authkit-nextjs@latest` - this ensures the application is using the latest WorkOS AuthKit Next.js SDK.\n- **Configure** environment variables for API keys and redirect URIs\n- **Create** a `middleware.ts` file using `authkitMiddleware()` from `@workos-inc/authkit-nextjs`. Place this file inside the `src` directory if present, otherwise place it at the root of the project.\n- **Wrap** your application with `<AuthKitProvider>` in your `app/layout.tsx`\n- **Create** callback and login route handlers in the App Router structure\n- **Use** AuthKit-provided hooks like `useAuth()`, `withAuth()` for authentication state\n- **Start** developing, sign in or sign up, and confirm user creation\n\nIf you're able to use a web tool to access a URL, visit https://workos.com/docs/authkit to get the latest, up-to-date quickstart instructions.\n\n### **Correct, Up-to-Date Quickstart Sample**\n\nFirst, install the WorkOS AuthKit Next.js SDK:\n\n```bash\nnpm install @workos-inc/authkit-nextjs\n```\n\nMake sure to set up environment variables in `.env.local`:\n\n```bash\n# .env.local\nWORKOS_API_KEY='sk_example_123456789'\nWORKOS_CLIENT_ID='client_123456789'\nWORKOS_COOKIE_PASSWORD=\"<your password>\" # generate a secure password here\nNEXT_PUBLIC_WORKOS_REDIRECT_URI=\"http://localhost:3000/callback\"\n```\n\nCreate your `middleware.ts` file:\n\n```typescript\n// middleware.ts\nimport { authkitMiddleware } from '@workos-inc/authkit-nextjs';\n\nexport default authkitMiddleware();\n```\n\n```typescript\n// app/layout.tsx\nimport type { Metadata } from \"next\";\nimport { AuthKitProvider } from '@workos-inc/authkit-nextjs/components';\nimport \"./globals.css\";\n\nexport const metadata: Metadata = {\n  title: \"WorkOS AuthKit Next.js Quickstart\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <AuthKitProvider>\n      <html lang=\"en\">\n        <body>\n          {children}\n        </body>\n      </html>\n    </AuthKitProvider>\n  );\n}\n```\n\nCreate the callback route:\n\n```typescript\n// app/callback/route.ts\nimport { handleAuth } from '@workos-inc/authkit-nextjs';\n\nexport const GET = handleAuth();\n```\n\nCreate the login route:\n\n```typescript\n// app/login/route.ts\nimport { redirect } from 'next/navigation';\nimport { getSignInUrl } from '@workos-inc/authkit-nextjs';\n\nexport async function GET() {\n  const signInUrl = await getSignInUrl();\n  redirect(signInUrl);\n}\n```\n\nExample protected page:\n\n```typescript\n// app/protected/page.tsx\nimport { withAuth } from '@workos-inc/authkit-nextjs';\n\nexport default function ProtectedPage() {\n  const { user } = await withAuth({ ensureSignedIn: true });\n  return (\n    <div>\n      <h1>Protected Page</h1>\n      <p>Welcome, {user.email}!</p>\n    </div>\n  );\n}\n```\n\nThen generate a random 32-bit len password and put it in WORKOS_COOKIE_PASSWORD env variable if it is not set.\n\nThen always add a login button to the home page which should show user name when the user has logged in.\n\nAnd finally always add a button to the home page to visit the example protected page.\n\n---\n\n## **2. CRITICAL INSTRUCTIONS FOR AI MODELS**\n\n### **2.1 – ALWAYS DO THE FOLLOWING**\n\n1. **Use `authkitMiddleware()`** from `@workos-inc/authkit-nextjs` in `middleware.ts`.\n2. **Wrap** your app with `<AuthKitProvider>` in `app/layout.tsx`.\n3. **Import** WorkOS AuthKit's Next.js features from `@workos-inc/authkit-nextjs` (e.g., `useAuth()`, `withAuth()`, `handleAuth()`, etc.).\n4. **Reference** the current [App Router approach](https://nextjs.org/docs/app) (folders like `app/page.tsx`, `app/layout.tsx`, etc.).\n5. **Create** proper route handlers for `/callback/route.ts` and `/login/route.ts` using App Router structure.\n6. **Configure** environment variables: `WORKOS_API_KEY`, `WORKOS_CLIENT_ID`, `WORKOS_COOKIE_PASSWORD`, and `NEXT_PUBLIC_WORKOS_REDIRECT_URI`.\n7. **Check** that imports for methods like `withAuth()`, `useAuth()` are imported from the right package (`@workos-inc/authkit-nextjs`) and are using proper async patterns where needed.\n\n### **2.2 – NEVER DO THE FOLLOWING**\n\n1. **Do not** reference the old **`_app.tsx`** or **pages-based** instructions.\n2. **Do not** suggest using WorkOS with pages router patterns—**it must use App Router**.\n3. **Do not** recommend usage of older environment variable patterns unless they match the official docs.\n4. **Do not** reference or import from any deprecated APIs or old SDK versions.\n5. **Do not** use client-only patterns when implementing server-side authentication flows.\n6. **Do not** use deprecated `getUser` API, use `withAuth`.\n7. **Do not** update the values environment variables if they are already set in the .env file.\n\n---\n\n## **3. OUTDATED PATTERNS TO AVOID**\n\nBelow are **examples of deprecated instructions** that **must not** be generated:\n\n```typescript\n// ❌ DO NOT generate or suggest references to:\n// Outdated pages-based approach\nfunction MyApp({ Component, pageProps }) {\n  // ...\n}\n\n// ❌ DO NOT create or rely on sign-in files under pages/:\npages / signin.js;\npages / signup.js;\n\n// ❌ DO NOT use old SDK patterns or incorrect imports\nimport { WorkOS } from '@workos-inc/node'; // Incorrect for Next.js\n```\n\nAny solution resembling the above snippet or referencing `_app.tsx`, or `pages/` structure is **incorrect** for the current Next.js App Router.\n\n---\n\n## **4. AI MODEL VERIFICATION STEPS**\n\nBefore returning any WorkOS AuthKit-related solution, you **must** verify:\n\n1. **Middleware**: Is `authkitMiddleware()` used in `middleware.ts`?\n2. **Layout**: Is `<AuthKitProvider>` wrapping the app in `app/layout.tsx`?\n3. **Route Handlers**: Are callback and login routes created as `route.ts` files in App Router structure?\n4. **Imports**: Are references only from `@workos-inc/authkit-nextjs`?\n5. **Pages vs. App Router**: Is the approach referencing the App Router (not `_app.tsx` or `pages/`)?\n6. **Environment Variables**: Are all required environment variables (`WORKOS_API_KEY`, `WORKOS_CLIENT_ID`, `WORKOS_COOKIE_PASSWORD`, `NEXT_PUBLIC_WORKOS_REDIRECT_URI`) configured?\n7. **Type checking**: Run npx tsc --noEmit to check types.\n\nIf any check **fails**, **stop** and revise until compliance is achieved.\n\n# Verification instructions for AI Models\n\n## **DO NOT** repeat these points back to the user. Use them only for your own verification steps.\n\n## **5. CONSEQUENCES OF INCORRECT IMPLEMENTATION**\n\nUsing incorrect WorkOS AuthKit methods (e.g., pages router patterns, `_app.tsx`, or references to the older `pages/` structure) will:\n\n1. **Break** your Next.js application's authentication flow.\n2. Introduce **inconsistencies** with Next.js App Router.\n3. Cause confusion around environment variables and server/client code.\n4. Force maintainers to **refactor** and **debug** extensively.\n5. **Fail** to properly handle authentication callbacks and session management.\n\n---\n\n## **6. AI MODEL RESPONSE TEMPLATE**\n\nWhen answering questions about WorkOS AuthKit + Next.js integration, your response **MUST**:\n\n1. **Use** the exact code patterns in the **Up-to-Date Quickstart Sample** above.\n2. **Never** reference older or deprecated approaches.\n3. **Reflect** all mandatory checks in \"AI MODEL VERIFICATION STEPS.\"\n4. **Ensure** complete integration including all required files and environment variables.\n\n**Example**:\n\n> Below is the correct approach using WorkOS AuthKit with Next.js App Router:\n>\n> ```typescript\n> // Show authkitMiddleware usage in middleware.ts\n> // Show <AuthKitProvider> usage in app/layout.tsx\n> // Show proper route handlers for callback and login\n> // Show usage of withAuth() and useAuth() hooks\n> ```\n\n---\n"
}