{
    "name": "react-blog-module",
    "description": "Embeddable blogs module for React/Next.js based apps.",
    "language": "typescript",
    "env": [],
    "packages": [
        "react-blog-module"
    ],
    "tags": [
        "blog",
        "react",
        "next"
    ],
    "relevant_files_pattern": [
        "**/blog/*",
        "**/app/layout.tsx"
    ],
    "setup_prompt": "# Install React Blog Module\n\n\n### Step 1: Install the Package\n\n```bash\nnpm install react-blog-module\n# or\nyarn add react-blog-module\n# or\npnpm add react-blog-module\n```\n\n### Step 2: Install Peer Dependencies\n\n```bash\nnpm install react react-dom @supabase/supabase-js\n```\n\n### Step 3: Set Up Supabase (Optional)\n\nIf you want to use Supabase as a content source, create a table in your Supabase database:\n\n```sql\nCREATE TABLE blog_posts (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  slug TEXT UNIQUE NOT NULL,\n  title TEXT NOT NULL,\n  description TEXT,\n  author TEXT NOT NULL,\n  content TEXT NOT NULL,\n  draft BOOLEAN DEFAULT false,\n  date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Add RLS policies as needed\nALTER TABLE blog_posts ENABLE ROW LEVEL SECURITY;\n\n-- Example: Allow public read access to published posts\nCREATE POLICY \"Public can read published posts\" ON blog_posts\n  FOR SELECT USING (draft = false);\n```\n\n### Step 4: Configure Your Blog\n\nCreate a blog configuration:\n\n```typescript\nimport { createBlogConfig, BlogAuthorInfo } from 'react-blog-module';\nimport { createClient } from '@supabase/supabase-js';\n\n// Set up Supabase client\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\n// Define authors\nconst authors: BlogAuthorInfo[] = [\n  {\n    name: 'John Doe',\n    avatar: '/avatars/john.jpg',\n    bio: 'Software engineer and technical writer',\n    social: {\n      twitter: 'johndoe',\n      github: 'johndoe',\n      linkedin: 'johndoe'\n    }\n  }\n];\n\n// Create blog configuration\nexport const blogConfig = createBlogConfig(\n  'My Blog',                    // title\n  'A blog about tech and code', // description\n  authors,                      // authors array\n  supabase,                     // Supabase client\n  '/blog',                      // basePath (optional)\n  'content/blog'                // contentPath (optional)\n);\n```\n\n### Step 5: Create Content Directory (For File-Based Posts)\n\nCreate a content directory for your MDX files:\n\n```\ncontent/blog/\n├── my-first-post.mdx\n├── another-post.mdx\n└── ...\n```\n\nExample MDX file (`content/blog/my-first-post.mdx`):\n\n```mdx\n---\ntitle: \"My First Blog Post\"\ndate: \"2024-01-15\"\ndescription: \"This is my first blog post using the React Blog Module\"\nauthor: \"John Doe\"\ndraft: false\n---\n\n# Welcome to My Blog\n\nThis is the content of my first blog post. I can use **markdown** and even React components!\n\n## Code Example\n\n```javascript\nfunction hello() {\n  console.log('Hello, world!');\n}\n```\n\n## Step 6: Create blog pages\n\nThis is an example of pages for Next.js with app router;\n\n### Blog Posts List Page\n\n```typescript\n// app/blog/page.tsx\n\nimport { BlogPostsPage, getMetadata } from 'react-blog-module';\nimport { blogConfig } from './blog-config';\n\nexport default function BlogPage() {\n  return <div>\n    <!-- Existing website layout -->\n    <BlogPostsPage config={blogConfig} />\n    </div>;\n}\n\n// For Next.js metadata\nexport async function generateMetadata() {\n  return await getMetadata(blogConfig);\n}\n```\n\n### Single Blog Post Page\n\n```typescript\n// app/blog/[slug]/page.tsx\n\nimport { SingleBlogPost, generateBlogMetadata, generateNextStaticParams } from 'react-blog-module';\nimport { blogConfig } from '../blog-config';\n\ninterface Props {\n  params: Promise<{ slug: string }>;\n}\n\nexport default function BlogPost({ params }: Props) {\n  return <div>\n    <!-- Existing website layout -->\n    <SingleBlogPost params={params} config={blogConfig} />\n    </div>;\n}\n\n// For Next.js\nexport async function generateMetadata({ params }: Props) {\n  return await generateBlogMetadata({ params, config: blogConfig });\n}\n\nexport async function generateStaticParams() {\n  return await generateNextStaticParams(blogConfig);\n}\n```\n\n"
}