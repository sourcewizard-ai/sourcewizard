{
    "name": "react-ai-agent-chat-sdk",
    "description": "Full stack agentic AI chat module with conversation storage and tools support",
    "language": "typescript",
    "env": [],
    "packages": [
        "react-ai-agent-chat-sdk"
    ],
    "tags": [
        "agent",
        "ai-sdk",
        "react",
        "ai"
    ],
    "relevant_files_pattern": [
        "**/app/layout.tsx"
    ],
    "setup_prompt": "# React AI Agent Chat SDK\n\nA React library for building AI-powered chat interfaces with tool execution, configurable timeouts, retry logic, and custom renderers.\n\n## Quick Start\n\n### 1. Install the Package\n\n```bash\nnpm install react-ai-agent-chat-sdk\n# or\npnpm add react-ai-agent-chat-sdk\n```\n\n**Peer Dependencies:**\n```bash\nnpm install react react-dom zod\n```\n\n**AI Provider (choose one):**\n```bash\n# For Anthropic Claude models\nnpm install @ai-sdk/anthropic\n\n# For OpenAI models  \nnpm install @ai-sdk/openai\n```\n\n### 2. Define Your Tools\n\nCreate tools with Zod schemas for type-safe input validation:\n\n```typescript\nimport { z } from 'zod';\nimport { createTool } from 'react-ai-agent-chat-sdk/config';\n\nconst readFileSchema = z.object({\n  file_path: z.string().describe('The path to the file to read'),\n});\n\nconst tools = {\n  read_file: createTool({\n    description: 'Read the contents of a file',\n    display_name: \"Reading file\",\n    inputSchema: readFileSchema,\n    execute: async ({ file_path }) => {\n      const content = await fs.readFile(file_path, 'utf-8');\n      return { file_path, content };\n    }\n  })\n};\n```\n\n### 3. Define Configuration\n\nCreate both client and server configurations:\n\n```typescript\nimport { makeAgentChatConfig } from 'react-ai-agent-chat-sdk/config';\nimport { anthropic } from '@ai-sdk/anthropic';\n\nconst { agentChatConfig, agentChatRouteConfig } = makeAgentChatConfig({\n  system_prompt: `You are a helpful assistant with access to file management tools.`,\n  route: \"/api/chat\",\n  tools,\n  auth_func: async () => true, // Replace with your auth logic\n  modelConfig: {\n    model: anthropic('claude-sonnet-4-20250514'),\n    temperature: 0.3\n  }\n});\n```\n\n### 4. Add Chat and History Routes\n\nCreate API routes for chat and history:\n\n**Chat Route (`app/api/chat/route.ts`):**\n```typescript\nimport { chatRoute } from 'react-ai-agent-chat-sdk/api';\nimport { agentChatRouteConfig } from '@/lib/agent-config';\n\nexport async function POST(req: Request) {\n  return chatRoute(agentChatRouteConfig, req);\n}\n```\n\n**History Route (`app/api/chat/history/route.ts`):**\n```typescript\nimport { chatHistoryRoute } from 'react-ai-agent-chat-sdk/api';\nimport { agentChatRouteConfig } from '@/lib/agent-config';\n\nexport async function GET(req: Request) {\n  return chatHistoryRoute(agentChatRouteConfig, req);\n}\n```\n\n### 5. Add AgentChat UI Element\n\nUse the chat component in your React app:\n\n```typescript\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { AgentChat } from 'react-ai-agent-chat-sdk';\nimport 'react-ai-agent-chat-sdk/agent-chat.css';\nimport { agentChatConfig } from '@/lib/agent-config';\n\nexport default function ChatPage() {\n  const [conversationId, setConversationId] = useState<string>('');\n  \n  useEffect(() => {\n    // Load or create conversation ID for persistence\n    let id = localStorage.getItem('current-conversation-id');\n    if (!id) {\n      id = `conv_${crypto.randomUUID()}`;\n      localStorage.setItem('current-conversation-id', id);\n    }\n    setConversationId(id);\n  }, []);\n  \n  if (!conversationId) {\n    return <div>Loading...</div>;\n  }\n  \n  return (\n    <AgentChat \n      config={agentChatConfig} \n      conversationId={conversationId} \n    />\n  );\n}\n```\n\n## Customization\n\n### Tool Renderers\n\nCreate custom renderers for specific tools:\n\n```typescript\nimport { ToolCall, ToolResult } from 'react-ai-agent-chat-sdk/config';\n\nexport function CustomFileRenderer({ toolCall, toolResult }: { \n  toolCall: ToolCall; \n  toolResult?: ToolResult \n}) {\n  const hasError = toolResult?.output?.__toolError;\n  const isTimeout = hasError && toolResult?.output?.__errorType === 'ToolTimeoutError';\n  \n  const getStatusText = () => {\n    if (isTimeout) return 'Timed out';\n    if (hasError) return 'Error';\n    if (toolResult?.output) return 'Completed';\n    return 'Running';\n  };\n\n  return (\n    <div className={`custom-renderer ${hasError ? 'error' : ''}`}>\n      <div>üìÅ {toolCall.toolName} - {getStatusText()}</div>\n      {toolResult?.output && (\n        <pre>{JSON.stringify(toolResult.output, null, 2)}</pre>\n      )}\n    </div>\n  );\n}\n```\n\nAdd renderers to your configuration:\n\n```typescript\n// lib/agent-chat-client-config.ts\nimport { AgentChatConfig } from 'react-ai-agent-chat-sdk/config';\nimport { CustomFileRenderer } from './renderers';\n\nexport function createClientConfig(config: AgentChatConfig): AgentChatConfig {\n  return {\n    ...config,\n    toolRenderers: {\n      read_file: CustomFileRenderer,\n    }\n  };\n}\n```\n\n### Route Parameters\n\nCustomize API endpoints to fit your application structure:\n\n```typescript\nconst { agentChatConfig, agentChatRouteConfig } = makeAgentChatConfig({\n  system_prompt: \"You are a helpful assistant.\",\n  route: \"/api/v1/chat\", // Custom chat route\n  tools,\n  auth_func: async () => true,\n  historyRoute: \"/api/v1/history\" // Custom history route (optional)\n});\n```\n\n### Retry Configurations\n\nConfigure timeouts and retries globally and per-tool:\n\n**Global Configuration:**\n```typescript\nconst { agentChatConfig, agentChatRouteConfig } = makeAgentChatConfig({\n  system_prompt: \"You are a helpful assistant.\",\n  route: \"/api/chat\",\n  tools,\n  auth_func: async () => true,\n  toolExecutionConfig: {\n    timeoutMs: 30000, // 30 seconds default\n    retries: 3,\n    retryDelayMs: 1000 // 1 second initial delay\n  }\n});\n```\n\n**Per-Tool Configuration:**\n```typescript\nconst tools = {\n  slow_operation: createTool({\n    description: 'A slow operation that needs longer timeout',\n    display_name: \"Processing data\",\n    inputSchema: z.object({}),\n    execute: async () => {\n      // Long-running operation\n    },\n    executionConfig: {\n      timeoutMs: 60000, // 1 minute timeout\n      retries: 1, // Only 1 retry\n      retryDelayMs: 5000 // 5 second delay\n    }\n  })\n};\n```\n\n**Storage Configuration:**\n```typescript\nimport { MemoryStorage } from 'react-ai-agent-chat-sdk/storage';\n\n// For development\nconst storage = new MemoryStorage();\n\n// For production, implement ChatStorage interface\nclass MyStorage implements ChatStorage {\n  async saveMessage(conversationId: string, message: ChatMessage): Promise<void> {\n    // Save to your database\n  }\n  \n  async getConversation(conversationId: string): Promise<Conversation | null> {\n    // Retrieve from your database\n  }\n}\n\nconst { agentChatConfig, agentChatRouteConfig } = makeAgentChatConfig({\n  system_prompt: \"You are a helpful assistant.\",\n  route: \"/api/chat\",\n  tools,\n  auth_func: async () => true,\n  storage // Add storage for conversation persistence\n});\n```\n\n**Model Configuration:**\n```typescript\nimport { openai } from '@ai-sdk/openai';\nimport { messageCountIs } from 'ai';\n\nconst { agentChatConfig, agentChatRouteConfig } = makeAgentChatConfig({\n  system_prompt: \"You are a helpful assistant.\",\n  route: \"/api/chat\",\n  tools,\n  auth_func: async () => true,\n  modelConfig: {\n    model: openai('gpt-4o'), // Use different AI models\n    temperature: 0.7,\n    stopWhen: messageCountIs(10), // Stop after 10 messages\n    onStepFinish: (step) => {\n      console.log('Step finished:', step.finishReason);\n    }\n  }\n});\n```"
}